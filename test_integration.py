import asyncio
import aiohttp
import json
import pytest
from datetime import datetime

@pytest.mark.asyncio
async def test_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    BOT_URL = "http://localhost:8000"
    API_TOKEN = "your-api-token-here"
    TEST_TELEGRAM_ID = "123456789"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_order_data = {
        "order_id": f"TEST-{int(datetime.now().timestamp())}",
        "vehicle_type": "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä",
        "location": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
        "date_time": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "price": "50 000 ‚ÇΩ"
    }
    
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Proton Telegram Bot")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞...")
        try:
            async with session.get(f"{BOT_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ë–æ—Ç –∑–¥–æ—Ä–æ–≤: {data['data']['bot_username']}")
                    print(f"   Bot ID: {data['data']['bot_id']}")
                    print(f"   API URL: {data['data']['api_url']}")
                else:
                    print(f"‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                    return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
            return
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        print("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API...")
        try:
            async with session.get(f"{BOT_URL}/") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {data['message']}")
                    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {', '.join(data['data']['endpoints'])}")
                else:
                    print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüß™ –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        notification_data = {
            "telegram_id": TEST_TELEGRAM_ID,
            "order_data": test_order_data
        }
        
        try:
            async with session.post(
                f"{BOT_URL}/notify",
                json=notification_data,
                headers=headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['message']}")
                    print(f"   Telegram ID: {data['data']['telegram_id']}")
                    print(f"   Order ID: {data['data']['order_id']}")
                elif response.status == 401:
                    print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ LARAVEL_BEARER_TOKEN")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: HTTP {response.status}")
                    error_data = await response.text()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # –¢–µ—Å—Ç 4: Legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç 4: Legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
        legacy_data = {
            "telegram_id": TEST_TELEGRAM_ID,
            "text": "üöõ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ API",
            "url": "https://app.protonrent.ru/orders/test"
        }
        
        legacy_headers = {
            "X-API-Key": "proton-telegram-secret-2024",
            "Content-Type": "application/json"
        }
        
        try:
            async with session.post(
                f"{BOT_URL}/notify-legacy",
                json=legacy_data,
                headers=legacy_headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['message']}")
                elif response.status == 401:
                    print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ legacy API - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ X-API-Key")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: HTTP {response.status}")
                    error_data = await response.text()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: python -m uvicorn main:app --host 0.0.0.0 --port 8000")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
    print("3. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π Telegram ID")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ bot.log")

if __name__ == "__main__":
    asyncio.run(test_bot_integration())
