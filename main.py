import os
import logging
import asyncio
import aiohttp
import hmac
import hashlib
from fastapi import FastAPI, Header, HTTPException, Depends, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from contextlib import asynccontextmanager
from typing import Union

from models import LaravelNotification, LegacyNotification, TelegramRegistration, ApiResponse, OrderData
from config import *
from storage import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Security
security = HTTPBearer()

async def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Bearer token"""
    if credentials.credentials != LARAVEL_BEARER_TOKEN:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    return credentials.credentials

async def verify_legacy_api_key(x_api_key: str = Header(default=None)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ X-API-Key –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    if x_api_key != NOTIFY_SECRET:
        raise HTTPException(status_code=401, detail="Invalid API key")
    return x_api_key

async def verify_webhook_signature(
    request: Request,
    x_signature: str = Header(default=None),
    x_signature_alg: str = Header(default=None)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not x_signature or not x_signature_alg:
        raise HTTPException(status_code=401, detail="Missing signature headers")
    
    if x_signature_alg != "HMAC-SHA256":
        raise HTTPException(status_code=401, detail="Unsupported signature algorithm")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    body = await request.body()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
    expected_signature = hmac.new(
        EBOT_HMAC_SECRET.encode(),
        body,
        hashlib.sha256
    ).hexdigest()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    provided_signature = x_signature.replace("sha256=", "")
    if not hmac.compare_digest(expected_signature, provided_signature):
        raise HTTPException(status_code=401, detail="Invalid signature")
    
    return True

async def verify_ebot_auth(
    request: Request,
    credentials: HTTPAuthorizationCredentials = Depends(security),
    x_signature: str = Header(default=None),
    x_signature_alg: str = Header(default=None)
):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Bearer token –∏ HMAC –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è eBot webhook"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bearer token
    if credentials.credentials != EBOT_API_TOKEN:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
    await verify_webhook_signature(request, x_signature, x_signature_alg)
    
    return credentials.credentials

# FastAPI app
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"üåê API URL: {API_URL}")
    logger.info(f"üîë Token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(BOT_TOKEN)}")
    logger.info(f"üîê Bearer Token: {bool(LARAVEL_BEARER_TOKEN)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è polling —Ä–µ–∂–∏–º–∞)
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...")
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º webhook: {webhook_info.url}")
            await bot.delete_webhook()
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        else:
            logger.info("‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å webhook: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="id", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID"),
        BotCommand(command="stop", description="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    ]
    await bot.set_my_commands(commands)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –≤–º–µ—Å—Ç–æ polling –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
    webhook_url = f"https://app.protonrent.ru/api/v1/telegram/webhook"
    try:
        logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}")
        await bot.set_webhook(webhook_url)
        logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ webhook —Ä–µ–∂–∏–º–µ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ polling —Ä–µ–∂–∏–º–µ...")
        try:
            asyncio.create_task(dp.start_polling(bot))
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        except Exception as polling_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling: {polling_error}")
            logger.error("üí• Telegram –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
    await bot.session.close()

app = FastAPI(
    title="Proton Telegram Bot API",
    description="API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å Laravel backend",
    version="2.0.0",
    lifespan=lifespan
)

# --- Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(Command("start"))
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    button = KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    kb = ReplyKeyboardMarkup(
        keyboard=[[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proton!</b>\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∞—Ä–µ–Ω–¥—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )
    
    await message.answer(welcome_text, reply_markup=kb, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

@dp.message(Command("stop"))
async def handle_stop(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop"""
    telegram_id = str(message.from_user.id)
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {LARAVEL_BEARER_TOKEN}',
                'Content-Type': 'application/json'
            }
            
            async with session.post(
                f"{API_URL}/telegram/disable-notifications",
                json={"telegram_id": telegram_id},
                headers=headers
            ) as response:
                if response.status == 200:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                    from storage import remove_user
                    remove_user(int(telegram_id))
                    
                    await message.answer("üîï –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("id"))
async def handle_id(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    await message.answer(f"üÜî –í–∞—à Telegram ID: <code>{telegram_id}</code>", parse_mode="HTML")

@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    contact = message.contact
    telegram_id = str(message.from_user.id)
    phone_number = contact.phone_number
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = phone_number.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {phone_number}")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {LARAVEL_BEARER_TOKEN}',
                'Content-Type': 'application/json'
            }
            
            registration_data = {
                "phone": phone_number,
                "telegram_id": telegram_id
            }
            
            async with session.post(
                f"{API_URL}/telegram/register",
                json=registration_data,
                headers=headers
            ) as response:
                
                if response.status == 200:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    from storage import add_user
                    add_user(int(telegram_id))
                    
                    success_text = (
                        "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö "
                        "–Ω–∞ –∞—Ä–µ–Ω–¥—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é."
                    )
                    await message.answer(success_text, parse_mode="HTML")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}")
                    
                elif response.status == 404:
                    error_text = (
                        "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ Proton. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ."
                    )
                    await message.answer(error_text, parse_mode="HTML")
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: HTTP {response.status}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

@app.get("/", response_model=ApiResponse)
async def root():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    return ApiResponse(
        success=True,
        message="Proton Telegram Bot API v2.0.0",
        data={
            "status": "active",
            "endpoints": ["/notify", "/notify-legacy", "/notify-webhook", "/health"],
            "telegram_bot": "@proton_rent_bot"
        }
    )

@app.get("/health", response_model=ApiResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        bot_info = await bot.get_me()
        return ApiResponse(
            success=True,
            message="Service is healthy",
            data={
                "bot_username": bot_info.username,
                "bot_id": bot_info.id,
                "api_url": API_URL
            }
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unhealthy")

@app.post("/notify", response_model=ApiResponse)
async def notify_laravel(
    data: LaravelNotification,
    token: str = Depends(verify_api_key)
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Laravel
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å Bearer token –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    """
    telegram_id = str(data.telegram_id)
    order_data = data.order_data
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Laravel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, –∑–∞–∫–∞–∑ {order_data.order_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "üöõ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏</b>\n\n"
        f"üìã <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order_data.vehicle_type}\n"
        f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {order_data.location}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {order_data.date_time}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order_data.price}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏."
    )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º order_url –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ order_id
    order_url = order_data.order_url or f"https://app.protonrent.ru/orders/{order_data.order_id}"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ",
                url=order_url
            )
        ]]
    )
    
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        return ApiResponse(
            success=True,
            message="Notification sent successfully",
            data={"telegram_id": telegram_id, "order_id": order_data.order_id}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to send notification: {str(e)}"
        )

@app.post("/notify-legacy", response_model=ApiResponse)
async def notify_legacy(
    data: LegacyNotification,
    api_key: str = Depends(verify_legacy_api_key)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç X-API-Key –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    """
    telegram_id = str(data.telegram_id)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å URL
    reply_markup = None
    if data.url:
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=data.url)
            ]]
        )
    
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=data.text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
        logger.info(f"Legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        return ApiResponse(
            success=True,
            message="Legacy notification sent successfully",
            data={"telegram_id": telegram_id}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ legacy —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to send legacy notification: {str(e)}"
        )

@app.post("/notify-webhook", response_model=ApiResponse)
async def notify_webhook(
    request: Request,
    token: str = Depends(verify_ebot_auth)
):
    """
    eBot webhook endpoint –¥–ª—è Laravel —Å–æ–±—ã—Ç–∏–π —Å Bearer + HMAC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π –æ—Ç TelegramBotIntegrationService
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_data = await request.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏—è
        telegram_id = event_data.get("event_data", {}).get("telegram_id")
        order_data = event_data.get("event_data", {}).get("order_data", {})
        correlation_id = event_data.get("correlation_id")
        idempotency_key = event_data.get("idempotency_key")
        
        if not telegram_id or not order_data:
            raise HTTPException(status_code=400, detail="Invalid event structure")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, –∑–∞–∫–∞–∑ {order_data.get('order_id')}, cid={correlation_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üöõ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏</b>\n\n"
            f"üìã <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order_data.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {order_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {order_data.get('date_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É
        order_url = order_data.get('order_url') or f"https://app.protonrent.ru/orders/{order_data.get('order_id')}"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ",
                    url=order_url
                )
            ]]
        )
        
        await bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}, cid={correlation_id}")
        return ApiResponse(
            success=True,
            message="Webhook notification sent successfully",
            data={
                "telegram_id": telegram_id, 
                "order_id": order_data.get('order_id'),
                "correlation_id": correlation_id,
                "idempotency_key": idempotency_key
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–±—ã—Ç–∏—è: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to process webhook event: {str(e)}"
        )

@app.post("/telegram/webhook")
async def telegram_webhook(update: dict):
    """
    Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    """
    try:
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook error: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=BOT_HOST,
        port=BOT_PORT,
        reload=DEBUG,
        log_level=LOG_LEVEL.lower()
    )