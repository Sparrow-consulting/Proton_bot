import os
import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from fastapi import FastAPI, Header
from pydantic import BaseModel
from dotenv import load_dotenv
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")
NOTIFY_SECRET = os.getenv("NOTIFY_SECRET")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()


# --- Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(Command("start"))
async def handle_start(message: Message):
    button = KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    kb = ReplyKeyboardMarkup(
        keyboard=[[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)


@dp.message(Command("stop"))
async def handle_stop(message: Message):
    telegram_id = message.from_user.id
    try:
        response = requests.post(
            f"{API_URL}/telegram/unsubscribe",
            json={"telegram_id": telegram_id}
        )
        if response.status_code == 200:
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {response.status_code} {response.text}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@dp.message(Command("id"))
async def handle_id(message: Message):
    telegram_id = message.from_user.id
    await message.answer(f"–í–∞—à Telegram ID: {telegram_id}")


@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: Message):
    contact = message.contact
    telegram_id = message.from_user.id
    phone_number = contact.phone_number

    # üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
    if not re.match(r"^\+?\d{10,15}$", phone_number):
        await message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    try:
        response = requests.post(
            f"{API_URL}/telegram/register",
            json={"phone": phone_number, "telegram_id": telegram_id}
        )
        if response.status_code == 200:
            logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω telegram_id={telegram_id} –¥–ª—è phone={phone_number}")
            await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        else:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}")
            await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


# --- FastAPI endpoint –¥–ª—è Laravel ---

class Notification(BaseModel):
    telegram_id: int
    text: str
    url: str | None = None


@app.post("/notify")
async def notify(data: Notification, x_api_key: str = Header(default=None)):
    if NOTIFY_SECRET and x_api_key != NOTIFY_SECRET:
        logging.warning("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        return {"status": "error", "detail": "Invalid API key"}

    message_text = data.text
    reply_markup = None

    if data.url:
        message_text += f"\n\nüîó <a href=\"{data.url}\">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ</a>"
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ", url=data.url)]]
        )

    try:
        await bot.send_message(chat_id=data.telegram_id, text=message_text, reply_markup=reply_markup, parse_mode="HTML")
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"status": "error", "detail": str(e)}


# --- Startup ---

@app.on_event("startup")
async def on_startup():
    logging.info("üì° Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    commands = [
        BotCommand(command="start", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="id", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID"),
        BotCommand(command="stop", description="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    ]
    await bot.set_my_commands(commands)

    asyncio.create_task(dp.start_polling(bot))
